#!yasl_linux

{
	1:2
	2:%@ (
		2:=:3
		2:=:3
		3:*:3
		1:=:3
		3:%>:0 0:? (
			"Didn't find square":0
			0:print
			"\n":0
			0:print
			1:0
			0:exit
		)
		3:%==:0 0:? (
			"Found square : ":0
			0:print
			2:=:0
			0:print
			"\n":0
			0:print
			2:=:1
			0:2
		) : (
			1:2
			2:+:2
		)
		3:!
		3:!
	)
}	square_root

{
	//Check if char >=A <=Z
	"A":0
	0:%>=:9
	0:!
	"Z":0
	0:%<=:9
	0:!
	9:&&:9
	9:? (
		0:=:0
		"A":0
		0:-:0
		0:=:4
		0:!
	)
	
	//Check if char >=a <=z
	"a":0
	0:%>=:9
	0:!
	"z":0
	0:%<=:9
	0:!
	9:&&:9
	9:? (
		0:=:0
		"a":0
		0:-:0
		0:=:4
		0:!
		26:4
		4:+:4
	)

	//Check if char >=0 <=9
	"0":0
	0:%>=:9
	0:!
	"9":0
	0:%<=:9
	0:!
	9:&&:9
	9:? (
		0:=:0
		"0":0
		0:-:0
		0:=:4
		0:!
		52:4
		4:+:4
	)

	"+":0
	0:%==:0
	0:? (
		62:4
	)
	0:!

	"/":0
	0:%==:0
	0:? (
		63:4
	)
	0:!
	0:!
}	char_to_int

{
	2:4
	4:^:4
	4:4
	4:^:4
	4:4
	4:^:4
	2:4
	4:^:4
}	reverse_b64_int

{
	// First byte
	4:=:5
	2:5
	5:<<:5
	4:!
	4:=:5
	4:5
	5:>>:5
	5:+:5

	//Second byte
	4:=:5
	15:5
	5:&:5
	4:5
	5:<<:5
	4:!
	4:=:5
	2:5
	5:>>:5
	5:+:5

	//Third byte
	4:=:5
	3:5
	5:&:5
	6:5
	5:<<:5
	4:!
	4:=:5
	5:+:5
	4:!
}	b64_to_byte

{
	2:5
	5:^:5
	3:5
	5:^:5
}	reverse_colours

{
	6:6
	6:*:6
	256:6
	6:/:6
}	reduce_color_level

{
	16:6
	//red
	5:=:6
	//reduce color level from 256 to 6
	reduce_color_level
	36:6
	6:*:6
	6:+:6
	5:!
	//green
	5:=:6
	reduce_color_level
	6:6
	6:*:6
	6:+:6
	5:!
	//blue
	5:=:6
	reduce_color_level
	6:+:6
	5:!
}	conv_24_to_8_bits

{
	"\e[48;5;":0
	6:=:0
	6:!
	"":0
	0:+:0
	0:+:0
	"m":0
	0:+:0
	0:print
	" ":0
	0:print
	"\e[48;5;0m":0	
	0:print
}	display_pixel

{
	1:=:3
	3:%@ (
		4:0
		0:#(char_to_int)
		4:#:4
		4:4
		4:!=:4
		4:? ("Unexpected character\n":0 0:print 1:0 0:exit)
		reverse_b64_int
		b64_to_byte
		reverse_colours
		conv_24_to_8_bits
		display_pixel
		1:3
		3:-:3
	)
	"\n":0
	0:print
}	display_line

{
	read
	//Check first read was successful
	#
	0
	== ? ("Didn't read anything\n" print 1 exit)
	0
	%== ? ("Didn't read anything\n" print 1 exit)
	!
	//read until the end
	0:%@ (
		read
		0
		%!= ? (
			!
			3 ^
			+
			3 !^
			+
			2 ^
		) : !
	)
	! !
	//Divide by 4 to get nb of pixels
	4
	%% ? ("Number of chars not a mutliple of 4\n" print 1 exit)
	/
	0:=:1

	"Image received, nb pixels : "
	print
	print
	"\n"
	print
}	read_image

{
	0:][:7
	7:#(
		7:=:0
		7:!
	)
}	explode_stack

#!

read_image
square_root
explode_stack
1:=:9
9:%@ (
	display_line
	-1:9
	9:+:9
)
